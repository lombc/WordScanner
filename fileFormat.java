package format;

import java.io.*;
import javax.swing.*;

/**
 * File Name: wordScanner.java
 * Program: File Format (Assignment 4)
 * Author: Cyrus Lomibao
 * Student ID: s0486875
 * E-mail Address: cyrus_juin.lomibao@lethbridgecollege.ca
 * Brief Summary: A program that asks user for input file that user
 *                wants to be formatted and formats it with the input values
 *                that the user enters. It then creates a new output file
 *                and fills it with the formatted data from the input file
 * Last Modified: February 19, 2019
 */
public class fileFormat extends javax.swing.JFrame {
    boolean fileLoaded = false;   
    
    public fileFormat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileName = new javax.swing.JTextField();
        searchFile = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        newFile = new javax.swing.JTextField();
        checkOutputFile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        widthField = new javax.swing.JTextField();
        precisionField = new javax.swing.JTextField();
        columnField = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        formatFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Format");
        getContentPane().setLayout(new java.awt.GridLayout(4, 0, 5, 10));

        jPanel1.setPreferredSize(new java.awt.Dimension(400, 50));
        jPanel1.setLayout(new java.awt.GridLayout());
        jPanel1.add(fileName);

        searchFile.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        searchFile.setText("Find File");
        searchFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchForInputFile(evt);
            }
        });
        jPanel1.add(searchFile);

        getContentPane().add(jPanel1);

        jPanel2.setLayout(new java.awt.GridLayout(1, 2));
        jPanel2.add(newFile);

        checkOutputFile.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        checkOutputFile.setText("Check Folders");
        checkOutputFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutputFileActionPerformed(evt);
            }
        });
        jPanel2.add(checkOutputFile);

        getContentPane().add(jPanel2);

        jPanel3.setLayout(new java.awt.GridLayout(2, 3));

        jLabel2.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Enter Width:");
        jPanel3.add(jLabel2);

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Enter Precision:");
        jPanel3.add(jLabel3);

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 11)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Enter # of Column(s):");
        jPanel3.add(jLabel4);
        jPanel3.add(widthField);
        jPanel3.add(precisionField);
        jPanel3.add(columnField);

        getContentPane().add(jPanel3);

        jPanel4.setLayout(new java.awt.GridLayout(1, 2));

        formatFile.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        formatFile.setText("Create Formatted File");
        formatFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createFormattedFile(evt);
            }
        });
        jPanel4.add(formatFile);

        getContentPane().add(jPanel4);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchForInputFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchForInputFile
        // Allows user to enter input file without having to type path
        JFileChooser selector = new JFileChooser();
        if(selector.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            fileName.setText(selector.getSelectedFile().getAbsolutePath());           
            fileLoaded = false;
        }
    }//GEN-LAST:event_searchForInputFile

    private void createFormattedFile(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createFormattedFile
        /* Creates new output file but first checks if output file exists
          then appends the output file with data from original file, but with
          the specific format entered by the user*/
        try{
            File inFile = new File(fileName.getText());
            File outFile = new File(newFile.getText());
            
            int width = Integer.parseInt(widthField.getText());
            int precision = Integer.parseInt(precisionField.getText());                
            int columns = Integer.parseInt(columnField.getText());
            
            // Reads the input file
            FileReader fr = new FileReader(inFile);
            BufferedReader br = new BufferedReader(fr);

            // checks if input file exists and is readable
            // also checks if output file doesnt exist            
            if((columns > 1) && (columns < 5) && inFile.exists() 
                    && inFile.canRead() && !outFile.exists()) {    

                
                String formatStr = String.format("%%%d.%df", width, precision);
                // "%%" gives percent sign
                // "%d" gets width
                // "%d" gets precision
                // "f" indicate that it is a float
               
                String line;
                int count = 0;               
                
                // Creates a new output file
                FileWriter fw = new FileWriter(outFile);
                PrintWriter pw = new PrintWriter(fw);
                
                while(true) {
                    // readLine reads br values and stores it to variable line
                    line = br.readLine();

                    // if line is empty, loop breaks
                    if(line == null) {
                        break;
                    }

                    String[] words = line.split(" ");

                    for(String word: words) {
                        // runs statement if length of word is greater than 0
                        if(word.length() != 0) {
                            // Class name is required when parsing an object
                            // because function is not an object and a part of
                            // a class
                            double value = Double.parseDouble(word);
                            pw.append(String.format(formatStr, value));

                            ++count;

                            if(count == columns) {
                                pw.append("\n");
                                count = 0;
                            }

                        }
                    }
                }

                JOptionPane.showMessageDialog(this, 
                        "Data formatted and sent to a new file!");
                fileName.setText("");
                newFile.setText("");
                widthField.setText("");
                precisionField.setText("");
                columnField.setText("");

            } else if(outFile.exists()) {
                // To make sure output file doesn't exist in first place
                JOptionPane.showMessageDialog(this,
                    "File Exists!", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
                newFile.setText("");
            } else {
                // To make sure columns value doesnt exceed stated values (1-5)
                JOptionPane.showMessageDialog(this,
                    "Column value can only be from 1-5! \n"
                            + "Re-enter formatting values.", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
                widthField.setText("");
                precisionField.setText("");
                columnField.setText("");             
            }
            
          // sends messages if error occurs instead of cancelling program
        } catch(NumberFormatException err) {
            JOptionPane.showMessageDialog(this,
                    "Please correct your formatting values!", "Error Message",
                    JOptionPane.ERROR_MESSAGE);
        } catch(FileNotFoundException err) {
            JOptionPane.showMessageDialog(this, "File not found!",
                    "Error Message", JOptionPane.ERROR_MESSAGE);
        } catch(IOException err) {
            JOptionPane.showMessageDialog(this, err.getMessage(),
                    "Error Message", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_createFormattedFile

    private void checkOutputFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutputFileActionPerformed
        // Allows user to enter output file without having to type path
        JFileChooser creator = new JFileChooser();
        if(creator.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            newFile.setText(creator.getSelectedFile().getAbsolutePath());           
            fileLoaded = false;
        }
    }//GEN-LAST:event_checkOutputFileActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(fileFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(fileFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(fileFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(fileFormat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fileFormat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton checkOutputFile;
    private javax.swing.JTextField columnField;
    private javax.swing.JTextField fileName;
    private javax.swing.JButton formatFile;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JTextField newFile;
    private javax.swing.JTextField precisionField;
    private javax.swing.JButton searchFile;
    private javax.swing.JTextField widthField;
    // End of variables declaration//GEN-END:variables
}
